#!/usr/bin/env node

/**
 * ÏÑ§Ï†ï Í≤ÄÏ¶ù Ïä§ÌÅ¨Î¶ΩÌä∏
 * Ï§ëÏöîÌïú ÏÑ§Ï†ïÏù¥ ÏÇ¨ÎùºÏßÄÏßÄ ÏïäÏïòÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
 */

const fs = require('fs');
const path = require('path');

// Í≤ÄÏ¶ùÌï† Ìï≠Î™©Îì§
const REQUIRED_ITEMS = {
  'popup.html': [
    'gemini-2.5-flash-lite', // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ†Ìò∏ÌïòÎäî Î™®Îç∏
    'n8nUrl',                // N8N Ïó∞Í≤∞ ÏÑ§Ï†ï
    'n8nApiKey',             // N8N API Key
    'testN8nConnection'      // N8N Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Î≤ÑÌäº
  ],
  'popup.js': [
    'setupAutoSaveInputs',   // ÏûêÎèô Ï†ÄÏû• Í∏∞Îä•
    'loadN8NSettings',       // N8N ÏÑ§Ï†ï Î°úÎìú
    'testN8nConnection'      // N8N Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
  ],
  'background.js': [
    'fetchN8NNodeTypes',     // N8N API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏
    'getRealTimeN8NNodeInfo' // Ïã§ÏãúÍ∞Ñ N8N Ï†ïÎ≥¥
  ]
};

console.log('üîç Verifying critical configuration...\n');

let allValid = true;
const errors = [];

// Í∞Å ÌååÏùº Í≤ÄÏ¶ù
for (const [fileName, requiredItems] of Object.entries(REQUIRED_ITEMS)) {
  const filePath = path.join(__dirname, '..', fileName);

  if (!fs.existsSync(filePath)) {
    errors.push(`‚ùå File not found: ${fileName}`);
    allValid = false;
    continue;
  }

  const content = fs.readFileSync(filePath, 'utf8');
  const missing = [];

  for (const item of requiredItems) {
    if (!content.includes(item)) {
      missing.push(item);
      allValid = false;
    }
  }

  if (missing.length > 0) {
    errors.push(`‚ùå ${fileName}: Missing ${missing.join(', ')}`);
  } else {
    console.log(`‚úÖ ${fileName}: All items present`);
  }
}

console.log('');

if (allValid) {
  console.log('‚úÖ All critical configurations are present!\n');
  process.exit(0);
} else {
  console.log('‚ùå VERIFICATION FAILED!\n');
  errors.forEach(err => console.log(err));
  console.log('\n‚ö†Ô∏è  Some critical features may have been removed!');
  console.log('Please review recent changes before committing.\n');
  process.exit(1);
}
